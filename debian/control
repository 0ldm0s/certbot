Source: letsencrypt
Section: web
Priority: optional
Maintainer: Debian letsencrypt <letsencrypt-devel@lists.alioth.debian.org>
Uploaders: Harlan Lieberman-Berg <hlieberman@setec.io>,
	   Francois Marier <francois@debian.org>
Build-Depends: debhelper (>= 9),
	       dialog,
               dh-python,
               python-all,
	       python-augeas,
               python-configargparse,
	       python-configobj,
               python-dialog,
               python-docutils,
	       python-mock,
	       python-ndg-httpsclient,
               python-nose,
               python-nosexcover,
               python-openssl (>= 0.15),
               python-parsedatetime,
	       python-psutil,
	       python-pyasn1,
	       python-pyparsing,
               python-repoze.sphinx.autointerface,
	       python-requests,
               python-rfc3339,
	       python-setuptools,
               python-sphinx,
               python-sphinx-rtd-theme,
	       python-sphinxcontrib.programoutput,
       	       python-tz,
               python-werkzeug,
               python-zope.component,
	       python-zope.interface
Standards-Version: 3.9.6
Homepage: https://www.letsencrypt.org/
X-Python-Version: >= 2.7

Package: python-acme
Section: python
Architecture: all
Depends: ca-certificates,
	 openssl,
	 python-configargparse,
	 python-cryptography (>= 0.8),
	 python-mock,
	 python-rfc3339,
	 python-pyasn1,
	 python-ndg-httpsclient,
	 python-openssl (>= 0.15),
	 python-tz,
	 python-requests,
	 python-six,
	 python-werkzeug,
	 ${misc:Depends},
	 ${python:Depends}
Description: ACME protocol library for Python 2
 This is a library used by the Let's Encrypt client for the ACME
 (Automated Certificate Management Environment).  The ACME protocol is
 designed as part of the Let's Encrypt project, to make it possible to
 setup an HTTPS server and have it automatically obtain a
 browser-trusted certificate, without any human intervention.  This
 library implements the protocol used for proving the control of a
 domain.  It currently supports only Python 2.

Package: letsencrypt
Architecture: all
Depends: dialog,
	 openssl,
	 python-acme,
         python-configargparse,
         python-configobj,
         python-jsonschema,
         python-mock,
         python-ndg-httpsclient,
         python-openssl (>= 0.15),
         python-parsedatetime,
         python-psutil,
         python-pyasn1,
         python-pyparsing,
         python-requests,
         python-rfc3339,
         python-tz,
         python-werkzeug,
         python-zope.component,
         python-zope.interface,
         ${misc:Depends},
         ${python:Depends}
Suggests: letsencrypt-doc
Description: Let's Encrypt standalone client
 The objective of Let's Encrypt and the ACME (Automated Certificate Management
 Environment) protocol is to make it possible to set up an HTTPS server and have
 it automatically obtain a browser-trusted certificate, without any human
 intervention. This is accomplished by running a certificate management agent on
 the web server.
 .
 This agent is used to:
 .
  - Automatically prove to the Let's Encrypt CA that you control the website
  - Obtain a browser-trusted certificate and set it up on your web server
  - Keep track of when your certificate is going to expire, and renew it
  - Help you revoke the certificate if that ever becomes necessary.
 .
 This package contains the standalone client.

Package: letsencrypt-apache
Architecture: all
Depends:
	apache2,
	letsencrypt,
	python-augeas,
	${misc:Depends}, ${python:Depends}
Description: Let's Encrypt client that can update Apache configurations
 The objective of Let's Encrypt and the ACME (Automated Certificate Management
 Environment) protocol is to make it possible to set up an HTTPS server and have
 it automatically obtain a browser-trusted certificate, without any human
 intervention. This is accomplished by running a certificate management agent on
 the web server.
 .
 This agent is used to:
 .
  - Automatically prove to the Let's Encrypt CA that you control the website
  - Obtain a browser-trusted certificate and set it up on your web server
  - Keep track of when your certificate is going to expire, and renew it
  - Help you revoke the certificate if that ever becomes necessary.
 .
 This package contains the Apache client.

Package: letsencrypt-doc
Section: doc
Architecture: all
Depends: libjs-sphinxdoc, python-sphinx-rtd-theme, ${misc:Depends}
Description: Let's Encrypt client that can update Apache configurations (docs)
 The objective of Let's Encrypt and the ACME (Automated Certificate Management
 Environment) protocol is to make it possible to set up an HTTPS server and have
 it automatically obtain a browser-trusted certificate, without any human
 intervention. This is accomplished by running a certificate management agent on
 the web server.
 .
 This agent is used to:
 .
  - Automatically prove to the Let's Encrypt CA that you control the website
  - Obtain a browser-trusted certificate and set it up on your web server
  - Keep track of when your certificate is going to expire, and renew it
  - Help you revoke the certificate if that ever becomes necessary.
 .
 This package contains the documentation.

Package: letsencrypt-nginx
Architecture: all
Depends: letsencrypt, nginx, ${misc:Depends}, ${python:Depends}
Description: Let's Encrypt client that can update Nginx configurations
 The objective of Let's Encrypt and the ACME (Automated Certificate Management
 Environment) protocol is to make it possible to set up an HTTPS server and have
 it automatically obtain a browser-trusted certificate, without any human
 intervention. This is accomplished by running a certificate management agent on
 the web server.
 .
 This agent is used to:
 .
  - Automatically prove to the Let's Encrypt CA that you control the website
  - Obtain a browser-trusted certificate and set it up on your web server
  - Keep track of when your certificate is going to expire, and renew it
  - Help you revoke the certificate if that ever becomes necessary.
 .
 This package contains the Nginx client.
